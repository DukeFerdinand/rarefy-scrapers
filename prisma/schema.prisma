generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessToken {
  id            String       @id
  token         String       @unique
  created       DateTime     @default(now())
  expires       DateTime?
  revoked       Boolean      @default(false)
  revokedAt     DateTime?
  machineUserId String
  permissions   Permission[] @default([READ, WRITE])
  MachineUser   MachineUser  @relation(fields: [machineUserId], references: [id])
}

model InviteCode {
  id   String  @id
  code String  @unique
  used Boolean @default(false)
}

model MachineUser {
  id                    String                  @id
  commonName            String
  created               DateTime                @default(now())
  allowedIps            String[]
  AccessToken           AccessToken[]
  MachineUserPermission MachineUserPermission[] @relation("MachineUserToMachineUserPermission")
}

model MachineUserPermission {
  id          String        @id
  permission  Permission
  MachineUser MachineUser[] @relation("MachineUserToMachineUserPermission")
}

model SavedSearch {
  id           String         @id
  name         String
  query        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  userId       String
  vinylOnly    Boolean        @default(true)
  User         User           @relation(fields: [userId], references: [id])
  SearchResult SearchResult[]
}

model SearchResult {
  id            String      @id
  url           String      @unique
  endDate       DateTime
  foundAt       DateTime    @default(now())
  updatedAt     DateTime
  searchId      String
  startDate     DateTime
  image         String[]
  bids          Int
  currentPrice  String
  startingPrice String
  title         String
  endPrice      String?
  SavedSearch   SavedSearch @relation(fields: [searchId], references: [id])
}

model User {
  id          String        @id
  email       String        @unique
  password    String
  joined      DateTime      @default(now())
  username    String        @unique
  role        Role[]        @default([User])
  SavedSearch SavedSearch[]
}

enum Permission {
  READ
  WRITE
}

enum Role {
  User
  Admin
}
